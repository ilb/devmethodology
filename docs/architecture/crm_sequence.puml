@startuml
actor BROWSER
BROWSER->CRM : GET crm.getActivityForm.php?processId=...&activityId=....
note right
    адрес cтраницы, с которой начинает пользователь
end note
CRM->BROWSER : 200 OK
note right
    СРМ создает операцию, на конкретного пользователя и под конкретное приложение, чтобы потом
    проверять права доступа.
    интерфейс содержаший ссылку на WORKFLOW
    с указанием адреса для получения контекстной информации по операции
    callcontext/startProcess?contextUrl=...&packageId=...&processDefinitionId=...
end note
BROWSER->WORKFLOW : GET callcontext/startProcess?contextUrl=...&packageId=...&processDefinitionId=...
note right
    Пользователь переходит по предоставленной ссылке.
    В переменной contextUrl содержится адрес для вызова контекста,
    адрес содержит идентификатор вызова (callId)
end note
WORKFLOW->CRM : GET contextUrl
note right
    В заголовках передает за кого пришло приложение за контекстом X-Remote-User
    Вызываем адрес для получения контекста.
    СРМ должен проверить:
    а) тот ли пользователь пришел за данными, которого СРМ отправлял
    б) то ли приложение пришло за данными, в которое СРМ отправлял
end note
CRM->WORKFLOW : 200 OK
note right
    Получаем контекстную информацию. Ответ должен содержать как минимум
    callbackUrl -  адрес для возврата в родительское приложение.
    Мы обсуждали, что это может  быть набор ссылок для отображения в интерфейсе
    Необходимо быть очень внимательным и не передавать информацию
    которая представляет из себя предметную область СРМ. Если мы сделаем это,
    то все другие приложения вплетающие эту WORKFLOW в свою работу будут вынуждены
    знать ее. Это приведет к плохой архитектуре.
    С другой стороны мы понимаем, что в данном пример
    наш минипроцесс работает с сервисом обработки ПТС, и каждый кто будет работать с ним
    должен будет знать в какой то части предметную область ПТС. Таким образом например номер ПТС
    - это вполне сквозная предметная область для всех участников и передавать ее в контексте не страшно.
end note
loop
WORKFLOW->BROWSER : HEADER Location: service_url
BROWSER->SERVICE : GET service_url?contextUrl=...
note right
    Теперь уже WORKFLOW вперекидывает пользователя на страницу сервиса работы с ПТС
    Все тоже самое что делал в свое время СРМ
end note
SERVICE->WORKFLOW : GET contextUrl
note right
    тоже идем за контекстной информацией таким же способом
end note
WORKFLOW->SERVICE : 200 OK
BROWSER->SERVICE : POST service_url
note right
    Собственно работа сервиса.
    Пользователь заполняет форму, и отправляет данные на сервер
    сервис сохраняет данные в базе считаем что этим и ограничивается
    его функциональность. соответственно работа выполнена,
    пора возвращаться назад.
    Делаем редирект на предоставленный ранее в контексте callback_url
    в переменные которого добавляем адрес для получения результатов работы result_url
end note
SERVICE->BROWSER : HEADER Location: callback_url
BROWSER->WORKFLOW : GET callbackUrl?resultUrl=...
WORKFLOW->SERVICE : GET result_url
SERVICE->WORKFLOW : 200 OK
note right
    Мини машина процессов забирает результаты работы сервиса.
    обрабатывает их и решает завершить активити и запустить следующую,
    а может решить закончить минимпроцесс и вернуться в CRM
    при запросе результата тоже передается X-Remote-User чтобы сервис мог проверить
    то ли приложение пришло за результатом, в рамках которого его получили и с тем ли пользователем.
end note
end
WORKFLOW->BROWSER : HEADER Redirect-to initial callbackUrl
BROWSER->CRM : GET callbackUrl & resultUrl=...
CRM->WORKFLOW : GET result_url
WORKFLOW->CRM : 200 OK
note right
    Получаем наконец то результаты в СРМ
end note
CRM->BROWSER : 200 OK
note right
    СРМ дальше уже что-то решает с полученными данными
end note
@enduml
