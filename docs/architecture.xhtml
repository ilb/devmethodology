<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg-flat.dtd">
<?xml-stylesheet type="text/xsl" href="/oooxhtml/oooxhtml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">@page {margin-top:2cm;margin-bottom:2cm;margin-left:2cm;margin-right:2cm;}</style>
    <title>Архитектура приложений</title>
    <meta name="generator" content="oooxhtml/1.4"/>
    <meta name="HeadURL" content="$HeadURL$"/>
  </head>
  <body>
    <div class="container text">
      <h1 id="arhitektura_prilozenij">
        <a class="anchor" href="#arhitektura_prilozenij">Архитектура приложений</a>
      </h1>
      <h2 id="princip__arhitektur_">
        <a class="anchor" href="#princip__arhitektur_">Принципы архитектуры</a>
      </h2>
      <p>Корпоративная архитектура заключается в проектировании слабосвязанных, повторно используемых, автоматизированно тестируемых <a href="#mikrosevis_">сервисов</a> и <a href="#jdro">ядер</a>.</p>
      <p>Проектируя микросервисы, мы хотим уйти от сложности монолита. Однако без соблюдения границ приложений и предметных областей, с синхронным взаимодействие компонентов в результате получается худшая форма монолита — микросервисный монолит:</p>
      <ul>
        <li>
          <p>отдельная часть системы не может быть независимо использована </p>
        </li>
        <li>
          <p>сложность увеличена за счет ненадежности сети, повторных попыток, «симуляции» двухфазных комитов и т. д.</p>
        </li>
      </ul>
      <p>Назначение данного документа — помочь найти решение данных проблем. Архитектура программного обеспечения сильно отличается от архитектуры зданий. Этот процесс больше похож на творчество, и понимание ошибок прошлого здесь критически важно. Однако даже эти знания не гарантируют результата. </p>
      <h3 id="mikrosevis_">
        <a class="anchor" href="#mikrosevis_">Микросевисы</a>
      </h3>
      <h3 id="razdelenie_funkcij">
        <a class="anchor" href="#razdelenie_funkcij">Разделение функций</a>
      </h3>
      <ol>
        <li>
          <p>Каждый отдельно взятый компонент или сервис должен отвечать только за одну конкретную бизнес-функцию</p>
        </li>
        <li>
          <p>Компонент или сервису не должны быть известны детали других компонентов или сервисов.</p>
        </li>
      </ol>
      <h3 id="gruppirovanie_servisov">
        <a class="anchor" href="#gruppirovanie_servisov">Группирование сервисов</a>
      </h3>
      <p>Сервисы, использующие общую предметную область, группируются в модули.</p>
      <h3 id="ierarhij_servisov">
        <a class="anchor" href="#ierarhij_servisov">Иерархия сервисов</a>
      </h3>
      <p>Модель сервисов плоская, однако в случаях, когда предметная область одного сервиса является подмножеством предметной области другого, можно говорить о «дочернем» сервисе.</p>
      <h3 id="povtornoe_ispol_zovanie_servisov">
        <a class="anchor" href="#povtornoe_ispol_zovanie_servisov">Повторное использование сервисов</a>
      </h3>
      <p>Для обеспечения повторного использования сервисов, зависимости сервисов <br/>передаются динамически через <a href="https://ru.wikipedia.org/wiki/HATEOAS">HATEOAS (Hypermedia as the Engine of Application State)</a>.</p>
      <h3 id="tip__zavisimostej">
        <a class="anchor" href="#tip__zavisimostej">Типы зависимостей</a>
      </h3>
      <p>Зависимые сервисы в зависимости от выбранной архитектуры могут предоставлять программный интерфейс либо готовое отображение.</p>
      <p>Допустимо использование низкоуровневых, повторно используемых зависимостей, предоставляющих простой программный интерфейс и простую, не "плывущую" структуру данных, например для обмена структурированной файловой информацией. Данная структура не завязывается на конкретное приложение и является транзитной.</p>
      <p>В остальных случаях, наиболее простой способ подключения зависимостей - виде готовых визуальных компонентов, подключаемых в iframe.</p>
      <h3 id="tip__vzaimodejstvij">
        <a class="anchor" href="#tip__vzaimodejstvij">Типы взаимодействия</a>
      </h3>
      <p>При проектирования слабо связанных сервисов существует два типа взаимодействия</p>
      <ol>
        <li>
          <p>Синхронное взаимодействие</p>
        </li>
        <li>
          <p>Асинхронное взаимодействие</p>
        </li>
      </ol>
      <p>Предпочтение отдается асинхронному взаимодействию (получающая сторона запрашивает данные при необходимости)</p>
      <h4 id="sinhronnoe_vzaimodejstvie">
        <a class="anchor" href="#sinhronnoe_vzaimodejstvie">Синхронное взаимодействие</a>
      </h4>
      <p>Недостатки синхронного взаимодействия:</p>
      <ol>
        <li>
          <p>Отказ сервиса приводит к отказу всей цепочки. Задержка сервиса приводит к задержке всей цепочки.</p>
        </li>
        <li>
          <p><b>Смешение предметных областей сервисов</b>. Один слабосвязанный сервис знает о наличии другого. Продлевая эту цепочку мы в худшем случая получаем бесконечную зависимость одного сервиса от всей инфраструктуры организации.</p>
        </li>
      </ol>
      <p>Достоинства синхронного взаимодействия</p>
      <ol>
        <li>
          <p>Простота реализации. Решение задачи «в лоб». Вы добавляете зависимость, добавляете вызов, а в ад микросервисного монолита попадаете потом.</p>
        </li>
      </ol>
      <p>Прямое синхронное взаимодействие разумно предпочитать в вызове <a href="#ierarhij_servisov">дочерних сервисов</a>, но с вызовами прочих зависимостей его следует «декорировать» одним или несколькими способами</p>
      <ol>
        <li>
          <p>Создание «шлюзов» вызова сервисов</p>
        </li>
        <li>
          <p>Использование HATEAOS ссылок с «готовыми» параметрами других предметных областей.</p>
        </li>
      </ol>
      <p>Пример: </p>
      <p>В рамках проверки залога вам требуется вызов сервиса внешнего шлюза, куда требуется передать «код заявки».</p>
      <p>Проблема: </p>
      <p>Проверка залога — слабосвязанный сервис и добавив в него зависимость от заявки вы перечеркнете все то, ради чего все он создавался — повторную используемость сервиса, в том числе и без заявки. В данном случае полезна аналогия «нельзя быть немного беременной» - нельзя быть немного связанным с заявкой. Если единственная зависимость не позволяет использовать модуль повторно, цели вы не достигнете.</p>
      <p>Решение:</p>
      <p>Слой бизнес-процессов внедряет ссылку вызова шлюза в виде HATEAOS зависимости, с уже подставленным кодом заявки: https://link.to.service.php?applicationUid=&lt;uuid заявки&gt;&amp;vin=${vin}. Переменная VIN, в отличии от кода заявки, является частью предметной области сервиса проверки залога, и следовательно может быть легко им подставлена.</p>
      <h4 id="asinhronnoe_vzaimodejstvie">
        <a class="anchor" href="#asinhronnoe_vzaimodejstvie">Асинхронное взаимодействие</a>
      </h4>
      <p>Недостатки асинхронного взаимодействия</p>
      <ol>
        <li>
          <p>Требуется продумывать обработку ошибок, способ реагирования, устранения ошибок, реакции на процесс в целом.</p>
        </li>
        <li>
          <p>Требуется координатор, отслеживающий запуск асинхронных сервисов</p>
        </li>
      </ol>
      <p>Достоинства асинхронного взаимодействия</p>
      <ol>
        <li>
          <p>Отказ или временная задержка сервиса не приводит к отказу всей цепочки «здесь и сейчас».</p>
        </li>
        <li>
          <p><b>Нет смешения предметных областей различных сервисов</b>.</p>
        </li>
      </ol>
      <h2 id="jdro">
        <a class="anchor" href="#jdro">Ядро</a>
      </h2>
      <p>Построение цельной архитектуры не возможно только на слабосвязанных сервисах. Мы можем выносить функционал из ядра системы, но мы не можем убрать ядро системы, не усложнив при этом взаимодействие модулей до бесконечности. Это следует из того, что вызов сервисов намного дороже и сложнее вызова методов текущего процесса. Кроме того, само проектирование асинхронной слабосвязанной архитектуры объективно сложнее.</p>
      <p>Поэтому предлагаемую архитектуру следует считать «гибридной», состоящей из ядер и микросервисов.</p>
      <p>Под термином «ядро» понимается «модульный монолит». «Модульный» монолит означает модульность на этапе сборки приложения. Подключая разные зависимости к ядру, мы можем собрать различные варианты приложения, в том числе для разных экземпляров приложения. </p>
      <p>Корпоративная среда может содержать несколько «модульных» ядер. Примеры:</p>
      <ul>
        <li>
          <p>Контакт и его история: различные сервисы могут публиковать использовать информацию в централизованной сессии.</p>
        </li>
        <li>
          <p>Корзина и ее оферты: различные сервисы могут публиковать и использовать информацию центральной корзины.</p>
        </li>
        <li>
          <p>Бизнес-процесс и его активности: пользователь может переходит от сервиса к сервису, но требуется централизованное хранилище и логика того, из чего состоит процесс, текущая активность и правила переходов.</p>
        </li>
        <li>
          <p>Долг и его состояние: требуется единое централизованное хранилище текущего состояния долга.</p>
        </li>
      </ul>
      <h2 id="sloi_arhitektur_">
        <a class="anchor" href="#sloi_arhitektur_">Слои архитектуры</a>
      </h2>
      <h3 id="sloj_biznes-processov">
        <a class="anchor" href="#sloj_biznes-processov">Слой бизнес-процессов</a>
      </h3>
      <p style="text-indent:0cm;">Слой бизнес-процессов знает окружающую инфраструктуру, оперирует указателями ресурсов LDAP. Управляет логикой бизнес-процесса "верхнего уровня". Например знает о том, что когда запустить то или иной сервис, откуда взять данные и как их преобразовать в предметную область сервиса.<br/></p>
      <h3 id="sloj_slabosvjzann_h_servisov">
        <a class="anchor" href="#sloj_slabosvjzann_h_servisov">Слой слабосвязанных сервисов</a>
      </h3>
      <p>Сервисы оперируют только собственной предметной областью. Контекст вызова сервиса передается из слоя бизнес-процессов в виде HATEOAS ресурсов (своего рода аналог лямбда-функций веба).</p>
      <p>Сервис не знает предметной области окружающей инфраструктуры и не оперирует ссылками вышестоящих ресурсов (ничего не знает о том, что над ним). Таким образом сервис становится слабосвязанным и повторно используемым.</p>
      <p>
        <a href="../workflow/sequence.png">Пример взаимодействия</a>
      </p>
      <h2 id="princip__proektirovanij">
        <a class="anchor" href="#princip__proektirovanij">Принципы проектирования</a>
      </h2>
      <ol>
        <li>
          <p>
            <a href="https://docs.ilb.ru/books/productmanagement/iconix/Моделирование_прецедентов.doc">Процесс разработки программного обеспечения ICONIX</a>
          </p>
        </li>
        <li>
          <p>Проектирование на основе предметной области (<a href="ddd.xhtml">Domain Driven Design, DDD</a>)</p>
        </li>
        <li>
          <p>Разработка через тестирование (<a href="tdd.xhtml">Test Driven Design, TDD</a>)</p>
        </li>
      </ol>
    </div>
  </body>
</html>
