<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg-flat.dtd">
<?xml-stylesheet type="text/xsl" href="/oooxhtml/oooxhtml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">@page {margin-top:2cm;margin-bottom:2cm;margin-left:2cm;margin-right:2cm;}</style>
    <title>Обучение программированию</title>
    <meta name="generator" content="oooxhtml/1.5"/>
    <meta name="HeadURL" content="$HeadURL$"/>
  </head>
  <body>
    <div class="container text">
      <h1 id="obucenie_na_veb-razrabotcika">Обучение программированию</h1>
      <p>Вы знаете, что в мире автоматизация создает множество новых рабочих мест? Работа становится более творческой и интеллектуальной.</p>
      <p>Вы можете задать себе вопрос: могу ли я стать программистом? Зависит от вас. На вашем пути будет огромное количество препятствий, но люди пришедшие в программирования из других областей есть даже у нас. Единственный путь преодолеть все препятствия — любить то, что вы делаете.</p>
      <h2 id="s_cego_nacat_">С чего начать</h2>
      <p>Все больше людей хотят научиться программированию, все больше курсов, книг и учебных материалов появляется в сети, но это и создает проблему: с чего начать?</p>
      <ol>
        <li>
          <p>С чего начать, если я хочу научиться программированию?</p>
        </li>
        <li>
          <p>Что изучать, а что не изучать?</p>
        </li>
        <li>
          <p>Какая практика наиболее эффективна? Как быстрее всего улучшить свои навыки?</p>
        </li>
      </ol>
      <h3 id="nuzno_nacat__s_celi">Нужно начать с цели</h3>
      <p>Люди учатся программировать по разным причинам:</p>
      <ol>
        <li>
          <p>Вы хотите стать начинающим разработчиком, хотите изучить основы веб разработки для создания сайтов или корпоративных приложений, сервисов. В этом случае вам нужно изучить язык веб-разработки, например Javascript, PHP, Python или Java. Особенностью Javascipt является то, что это единый язык для сервисов и интерфейсов. Вам в любом случае нужно его знать, поэтому возможно стоит начать с него.</p>
        </li>
        <li>
          <p>Вы хотите создать простой статический сайт. Для этого достаточно изучить основы HTML и CSS. Есть множество готовых инструментов, например <a href="https://nextjs.org/">nextjs</a>.</p>
        </li>
        <li>
          <p>Вы хотите создать сайт на готовом движке, например <a href="https://ru.wordpress.com/">Wordpress</a>. Для этого даже не нужны знания программирования. Есть множество платных и бесплатных хостингов, где вы можете разместить свой сайт.</p>
        </li>
        <li>
          <p>Вы хотите стать аналитиком данных, научиться анализировать и визуализировать данные. Для этого стоит изучить <a href="https://pythonworld.ru/obrabotka-dannyx">основы Python и библиотек Pandas, Matplotlib, Seaborn.</a></p>
        </li>
      </ol>
      <p>В идеале вы должны быть в состоянии сформулировать свое утверждение цели следующим образом:</p>
      <p style="font-style:italic;">Через 2 недели я хочу автоматизировать мою рутиную задачу, чтобы иметь больше времени на обучение программированию</p>
      <p style="font-style:italic;">Через 4 недели я хочу узнать болевые точки моего бизнес-процесса, проанализировав данные</p>
      <p style="font-style:italic;">Через 3 месяца я хочу опубликовать сайт группы моего друга.</p>
      <p style="font-style:italic;">Через 12 месяцев я хочу выпустить рабочую версию моей бизнес-идеи: MVP или <a href="https://ru.wikipedia.org/wiki/Минимально_жизнеспособный_продукт">Минимально жизнеспособный продукт</a>.</p>
      <p>Даже если у вас нет конкретной временной шкалы, ее создание может помочь вам сохранить мотивацию и отслеживать ваши успехи в достижении вашей цели. Замените цель вроде «Я хочу бросить свою работу библиотекаря и стать разработчиком программного обеспечения» на что-то более конкретное, например: «Через 12 месяцев я хочу бросить свою работу библиотекаря и стать разработчиком программного обеспечения». Твердо помня об этом, вы сможете определить основные этапы вашего прогресса.</p>
      <h3 id="ponjt___kak_v__ucites__lucse_vsego">Понять, как вы учитесь лучше всего</h3>
      <ol>
        <li>
          <p>Некоторые люди любят смотреть видео и скриншоты на YouTube</p>
        </li>
        <li>
          <p>Некоторые люди любят погрузиться в книгу</p>
        </li>
        <li>
          <p>Некоторые люди хотят понять это, делая</p>
        </li>
        <li>
          <p>Некоторые люди должны читать документацию от начала до конца</p>
        </li>
        <li>
          <p>Некоторые люди учатся лучше, имея наставника</p>
        </li>
      </ol>
      <p>Некоторые методы обучения будут работать очень хорошо для вас, а другие будут гораздо менее эффективными. Прежде чем вы начнете изучать код, стоит понять, как вам нравится учиться, и как формировать свой учебный путь вокруг этого метода.</p>
      <p>Если вы действительно слушаете себя, вы будете делать это естественно. Однако, если вы чувствуете, что есть правильный способ учиться, или испытываете давление, чтобы учиться определенным образом, вы можете столкнуться с тяготением к методам обучения, которые кажутся «правильными» или впечатляющими, но работают для вас не очень хорошо.</p>
      <h3 id="rabotajte_nad_tem__cto_vazno_dlj_vas">Работайте над тем, что важно для вас</h3>
      <p>Когда вы учитесь программировать, легко потратить часы и часы на учебники, которые мало что значат для вас. Вы можете создавать игрушечные программы, такие как списки дел или глупые веб-сайты для чего-то, что не существует. Хотя это хороший способ учиться, это не очень мотивирует. Наряду со всеми уроками, которые помогут вам создать что-то для обучения, невероятно важно создать то, что важно для вас.</p>
      <p>Если вы учитесь создавать веб-сайты, создайте веб-сайт для себя или для того, о ком вы заботитесь. Если вы учитесь создавать веб-приложение, попробуйте создать веб-приложение, которое решит проблему в вашей жизни, какой бы маленькой она ни была. Если вы учитесь создавать игры, начните с создания игры, в которую вы сами хотите играть.</p>
      <p>Если вы хотите научиться анализировать данные, начините с тех данных, которые важны для вас.</p>
      <p>Если вы хотите научиться автоматизировать рутиные задачи, начните с тех задач, которые отнимают у вас большее время.</p>
      <p>Наличие личного проекта, о котором вы заботитесь и можете применить свои знания, будет самой большой вещью, которая ускоряет ваше обучение и заставляет вас придерживаться курса.</p>
      <h3 id="najdite_horosuy_kompaniy">Найдите хорошую компанию</h3>
      <p>Иметь кого-то, кто поддержит вас, неоценимо, будь то наставник или кто-то еще, кого вы знаете, кто также учится кодировать. Обучение кодированию может быть сложным, но это помогает узнать, что кто-то еще испытывает те же проблемы.</p>
      <p>Наставник также может дать огромный импульс вашим усилиям по изучению кода. Он может помочь вам, когда вы застряли, мотивировать вас, когда вы сомневаетесь, дать совет о том, что нужно делать дальше, и помочь вам достичь своей конечной цели. Если вы знаете кого-то, кто уже достиг цели, над которой вы работаете, то он мог бы стать вашим наставником. Правда состоит в том, что большинство отношений между наставником и учеником не начинаются с вопроса: «Будете ли вы моим наставником?». Они начинают с приглашения выпить кофе, еду или пиво и продолжаются после этого, если это работает для обоих из вас.</p>
      <h3 id="bud_te_posledovatel_n_m">Будьте последовательным</h3>
      <p>Гораздо лучше тренироваться регулярно по 20 минут каждый день, чем три часа раз в две недели. Последовательность поможет вам закрепить то, что вы изучаете, и сохранить информацию. Если промежутки между тренировками слишком велики, вы забудете что-то и потеряете способность делать то, что вы ранее посвятили мышечной памяти.</p>
      <h3 id="otslezivajte_svoj_progress">Отслеживайте свой прогресс</h3>
      <p>Обучение кодированию может быть долгим путешествием, и может быть легко забыть, как далеко вы продвинулись. Даже после того, как вы изучили основы программирования, что является фантастическим достижением, вы все равно можете почувствовать, что вы так много не знаете. Вот почему важно отслеживать ваш прогресс и размышлять над тем, что вы узнали.</p>
      <p>Каждый день или каждую неделю пишите абзац о том, что вы узнали, чего не знали днем ​​или неделей раньше. Через некоторое время, отметив ваш прогресс с помощью этих небольших записей в журнале, вы сможете оценить, как далеко вы продвинулись.</p>
      <h3 id="zakoncit__delo">Закончить дело</h3>
      <p>Одна вещь, которая может замедлить ваш прогресс при изучении кода - никогда не заканчивает дела. Ведь начинать проекты - это весело! Вы можете выбирать детали, которые хотите построить, и вещи, которые вы хотите изучить. Если что-то слишком сложно, вы оставляете это на потом ... но что, если позже никогда не наступит? В итоге вы не получаете достаточно практики, откладывая сложные задачи на потом. Если вы привыкнете не доделывать вещи, это может привести к пробелам в ваших знаниях.</p>
      <p>Помните: лучше закончить только одну вещь, чем начинать десять и никогда не заканчивать.</p>
      <h3 id="soobsenij_ob_osibkah_-_vas_drug">Сообщения об ошибках - ваш друг</h3>
      <p>Одной вещью, которая идет рука об руку с обучением к коду, являются сообщения об ошибках! Это те непонятные тексты сообщений, которые говорят нам, что мы сделали что-то не так в нашем коде. Когда мы видим один из них, наш первый инстинкт обычно состоит в том, чтобы как можно быстрее отойти от сообщения об ошибке и начать поиск решения. Но мы действительно нашли время, чтобы прочитать это? Если нет, мы можем упустить много полезной информации. На самом деле, сообщения об ошибках могут быть удивительными, потому что много времени они говорят нам о том , что это неправильно, и где . На самом деле, худшее, что мы можем сделать, когда мы сталкиваемся с сообщением об ошибке, это отойти от него, не прочитав его должным образом. Поэтому помните: сообщения об ошибках - ваш друг. Они здесь, чтобы помочь вам, а не наказать вас.</p>
      <h3 id="ne_p_tajsj_ucit__vse">Не пытайтесь учить все</h3>
      <p>Одна из лучших и, тем не менее, самых сложных вещей в технологии - это то, что вы никогда не сможете узнать все. На самом деле, чем больше вы знаете, тем больше понимаете, что не знаете! Тысячи языков программирования, веб-фреймворков, инструментов, спецификаций, библиотек и протоколов вы могли бы изучить, но было бы ошибкой пытаться выучить их все. Старайтесь не спускаться в кроличьи норы. Перечислите вещи, которые вам нужно выучить, чтобы достичь своей цели, и старайтесь придерживаться их, пока не достигнете. По ходу дела вы обнаружите вещи, о которых хотите узнать, запишите их в безопасном месте и вернитесь к ним, когда придет время.</p>
      <h3 id="i_pomnite__dlj_etogo_net_scenarij!">И помните, для этого нет сценария!</h3>
      <p>Есть тысяча разных способов научиться писать код. Некоторые люди очень быстро начинают программировать, у других это занимает больше времени. Один человек может быстро понять концепции, которые вам кажутся трудными, в то время как другой может бороться с чем-то, что вы считаете легким. Ваше путешествие может быть не линейным. Вы можете делать перерывы, отвлекаться или сомневаться. Вы можете научиться кодировать, потом забыть, а затем выучить все заново.</p>
      <p>Нет правильного способа научиться писать код, и нет плана, который работает для всех. Обучение программированию - это путешествие, которое будет таким же уникальным, как и вы. Примите неуверенность, и пойдите этот путь независимо. <i>Это действительно того стоит</i>.</p>
      <h3 id="istocniki">Источник</h3>
      <p>
        <a href="https://medium.com/append-score/how-to-learn-to-code-fast-d8c41a7621ac">Как научиться писать код быстро</a>
      </p>
    </div>
  </body>
</html>
